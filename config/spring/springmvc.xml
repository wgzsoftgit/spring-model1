<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 

xmlns:mvc="http://www.springframework.org/schema/mvc"

    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

    xmlns:p="http://www.springframework.org/schema/p" 

    xmlns:context="http://www.springframework.org/schema/context"

    xsi:schemaLocation="

        http://www.springframework.org/schema/beans 

        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

        http://www.springframework.org/schema/context 

        http://www.springframework.org/schema/context/spring-context-3.0.xsd

        http://www.springframework.org/schema/mvc

        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 可以扫描controller、service、...
	这里让扫描controller，指定controller的包    生成bean
	 -->
	<context:component-scan base-package="ly.base"></context:component-scan>
	
	<!-- 使用 mvc:annotation-driven代替注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多的参数绑定方法，
	比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven
	 -->
	 <!--一键式配置映射器和注解适配器  conversion-service="conversionService"参数绑定  validator="validator"校验器 -->
	<!--  conversion-service="conversionService" -->
	<mvc:annotation-driven   ></mvc:annotation-driven>
	
	<!-- 项目中使用了 resultful 风格，所以对静态资源的处理上就不能再使用  用下面解决 -->
	<mvc:default-servlet-handler/>
	<!-- 静态资源文件处理  包括 ：js、css、img、..-->
     <mvc:resources location="/static/" mapping="/static/**" />
	<mvc:resources location="/upload/" mapping="/upload/**" />
	

	

	<!-- 视图解析器
	解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
	 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/jsps/"/>
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- 自定义参数绑定 -->
<!-- 	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		转换器
		<property name="converters">
			<list>
				日期类型转换
				<bean class="ly.base.controller.converter.CustomDateConverter"/>
			</list>
		</property> 
		
	</bean> -->
	

	
	<!-- 全局异常处理器
	只要实现HandlerExceptionResolver接口就是全局异常处理器
	 -->
	 <!-- <bean class="ly.base.exception.CustomException"></bean> -->
	<bean class="ly.base.exception.CustomExceptionResolver"></bean>
	
	
	<!-- 文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 指定默认编码格式，不指定的时候使用iso-8859-1 -->
	<property name="defaultEncoding" value="UTF-8"/>
	<!-- 上传的文件的最大值10兆 -->
	<property name="maxUploadSize" value="380000000000000"/>
	<!-- 文件上传的临时目录 在META-INF下tempDir -->
	  <property name="uploadTempDir" value="tempDir" /> 
	</bean>
	
	<!--全局拦截器 -->
<mvc:interceptors>
	<!--多个拦截器,顺序执行 -->
	<!-- 登陆认证拦截器 -->
	<mvc:interceptor>
		<!-- /**表示所有url包括子url路径 -->
		<mvc:mapping path="/admin/**"/>
		<bean class="ly.base.interceptor.LoginInterceptor"></bean>
	</mvc:interceptor>
	
</mvc:interceptors>
	






	
	<!-- 校验器 -->
<!-- 	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		hibernate校验器
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
校验错误信息配置文件
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		资源文件名
		<property name="basenames">   
       	 <list>    
            <value>classpath:CustomValidationMessages</value> 
       	 </list>   
    	</property>
		资源文件编码格式
		<property name="fileEncodings" value="utf-8" />
		对资源文件内容缓存时间，单位秒
		<property name="cacheSeconds" value="120" />
	</bean>
 -->	
</beans>